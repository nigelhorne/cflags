#!/usr/bin/env perl

# TODO: Differentiate between 32- and 64-bits

use strict;
use warnings;
use Sys::Info;

my $gccversion;
my $cputype;
my $isllvm;
my $cflags;

my $fin;
open($fin, '-|', 'gcc --version 2>&1');
if((!$fin) || eof($fin)) {
	open($fin, '-|', 'cc --version 2>&1');
	die "Can't find C compiler" if(!defined($fin));
}
my $gccinfo = do { local $/; <$fin> };
if($gccinfo =~ /\s([\d\.]+)/) {
	$gccversion = $1;
} elsif($gccinfo =~ /LLVM\sversion\s([\d\,]+)/s) {
	$gccversion = $1;
	$isllvm = 1;
}

my $cpu = Sys::Info->new()->device('CPU');

my @i =  $cpu->identify();
my $info = $i[0];
if($info) {
	if($info->{'architecture'} eq 'AMD-64') {
		$cputype = 'amd';
	} elsif($info->{'name'} =~ /^AMD/) {
		$cputype = 'amd';
	} elsif($info->{'name'} =~ /^Intel/) {
		$cputype = 'x86';
	} elsif($info->{'architecture'} eq 'aarch64') {
		$cputype = 'arm';
	} elsif($info->{'manufacturer'} eq 'GenuineIntel') {
		$cputype = 'x86';
	} else {
		use Data::Dumper;
		print Data::Dumper->new([\$info])->Dump();
		die "Can't determine the architecture";
	}
} elsif($^O eq 'gnu') {
	$cputype = 'x86';	# I believe GNU/Hurd only runs on this
}

if(($cputype eq 'amd') || ($cputype eq 'x86')) {
	$cflags = '-O2 -W -Wformat=2 -Wswitch -Wshadow -Wwrite-strings -Wuninitialized -Wall -pipe -fomit-frame-pointer -pedantic -D_FORTIFY_SOURCE=2 -Wpointer-arith -Wstrict-prototypes -fstack-protector -Wstack-protector -Wextra -Wbad-function-cast -Wcast-align -Wcast-qual -Wdisabled-optimization -Wendif-labels -Wfloat-equal -Wformat-nonliteral -Winline -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wundef -Wformat-security -ftree-vectorize -fdiagnostics-color=auto';
} elsif($cputype eq 'arm') {
	$cflags = '-O2 -W -Wformat=2 -Wswitch -Wshadow -Wwrite-strings -Wuninitialized -Wall -pipe -fomit-frame-pointer -D_FORTIFY_SOURCE=2 -Wpointer-arith -Wstrict-prototypes -fstack-protector -Wstack-protector -Wextra -Wbad-function-cast -Wcast-align -Wcast-qual -Wdisabled-optimization -Wendif-labels -Wfloat-equal -Wformat-nonliteral -Winline -Wmissing-declarations -Wmissing-prototypes -Wnested-externs -Wpointer-arith -Wundef -Wformat-security';
}

foreach my $flag (@{$info->{'flags'}}) {
	if(($flag eq 'SSE') || ($flag eq 'sse')) {
		$cflags .= ' -msse -mfpmath=sse';
	} elsif(($flag eq 'SSE2') || ($flag eq 'sse2')) {
		$cflags .= ' -msse2';
	} elsif($flag eq 'SSE3') {
		$cflags .= ' -msse3';
	} elsif($flag eq 'ssse3') {
		$cflags .= ' -mssse3';
	} elsif(($flag eq 'SSE4.1') || ($flag eq 'sse4_1')) {
		$cflags .= ' -msse4.1';
	} elsif(($flag eq 'SSE4.2') || ($flag eq 'sse4_2')) {
		$cflags .= ' -msse4.2';
	} elsif($flag eq 'MMX') {
		$cflags .= ' -mmmx';
	}
}

if($ENV{'CFLAGS'}) {
	foreach my $arg (split(' ', $ENV{'CFLAGS'})) {
		if($arg =~ /^-I/) {
			$cflags .= " $arg";
		}
	}
}

if($^O eq 'linux') {
	# FIXME: Probably also in Sys::Info
	open(my $fin, '<', '/proc/cpuinfo');
	my $cpuinfo = do { local $/; <$fin> };
	close $fin;

	if($cpuinfo =~ /CPU implementer/s) {
		die $cputype if($cputype ne 'arm');
		if(($cpuinfo =~ /^Features.+crc32/ms) && ($cpuinfo =~ /^Features.+atomics/ms)) {	
			$cflags .= ' -march=avmv8-a-crc32';
		}
	} elsif($cpuinfo =~ /model name/s) {
		die $cputype if($cputype ne 'x86' && $cputype ne 'amd');
	}
}

die "Can't determine cpu type" if(!defined($cputype));
die "Can't determine GCC version" if(!defined($gccversion));

if(($cputype eq 'amd') || ($cputype eq 'x86')) {
	$cflags .= ' -mtune=native -march=native';
}

# print "$cputype, $gccversion\n";
print $cflags;
